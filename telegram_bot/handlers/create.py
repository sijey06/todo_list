from datetime import date

import aiohttp
from aiogram.types import Message
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import ManagedTextInput

from config.settings import API_URL


async def handle_task_title(
        message: Message, widget: ManagedTextInput[str],
        manager: DialogManager, value: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    manager.current_context().dialog_data["task_title"] = value
    await manager.next()


async def handle_task_description(
        message: Message, widget: ManagedTextInput[str],
        manager: DialogManager, value: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    manager.current_context().dialog_data["task_description"] = value
    await manager.next()


async def fetch_categories():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á –∏–∑ RestAPI."""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/categories") as response:
            return await response.json()


async def get_categories(dialog_manager: DialogManager, **kwargs):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á."""
    categories = await fetch_categories()
    return {"categories": categories}


async def category_chosen(callback, select, manager: DialogManager, item_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏."""
    categories = await fetch_categories()
    selected_category = next(
        (cat for cat in categories if cat["id"] == item_id), None)
    if selected_category:
        manager.current_context().dialog_data["selected_category"] = item_id
        manager.current_context().dialog_data[
            "selected_category_title"] = selected_category["title"]
    else:
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    await manager.next()


async def handle_date_selection(
        callback, widget, manager: DialogManager, selected_date: date):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    manager.current_context().dialog_data[
        "chosen_date"] = selected_date.isoformat()
    await manager.next()


async def save_task_handler(callback, button, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    task_title = manager.current_context().dialog_data.get("task_title")
    task_description = manager.current_context().dialog_data.get(
        "task_description")
    chosen_date = manager.current_context().dialog_data.get("chosen_date")
    selected_category_id = manager.current_context().dialog_data.get(
        "selected_category")
    selected_category_title = manager.current_context().dialog_data.get(
        "selected_category_title")
    telegram_user_id = callback.from_user.id
    async with aiohttp.ClientSession() as session:
        payload = {
            "telegram_user_id": telegram_user_id,
            "title": task_title,
            "description": task_description,
            "category": [selected_category_id],
            "due_date": chosen_date
        }
        async with session.post(f"{API_URL}/tasks/", json=payload) as resp:
            if resp.status == 201:
                message = f"""
üìå –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:
‚ö°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}
‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {task_description}
üîñ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_title}
üìÜ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {chosen_date}
"""
                await callback.message.answer(message)
            else:
                await callback.message.answer(
                    "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
